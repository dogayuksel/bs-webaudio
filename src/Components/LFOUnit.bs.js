// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as LFO$WebAudio from "../LFO/LFO.bs.js";
import * as Knob$WebAudio from "./Knob.bs.js";
import * as Envelope$WebAudio from "../Envelope/Envelope.bs.js";
import * as EnvelopeUnit$WebAudio from "./EnvelopeUnit.bs.js";
import * as AppContextProvider$WebAudio from "./AppContextProvider.bs.js";

function LFOUnit(Props) {
  var appContext = React.useContext(AppContextProvider$WebAudio.appContext);
  var match = React.useState((function () {
          return false;
        }));
  var setLfoOn = match[1];
  var lfoRef = React.useRef(undefined);
  var envelopeRef = React.useRef(undefined);
  React.useEffect((function () {
          var match = appContext.audioContext;
          if (match !== undefined) {
            var audioContext = Caml_option.valFromOption(match);
            var lfo = LFO$WebAudio.start(LFO$WebAudio.connect(audioContext.destination, LFO$WebAudio.make(audioContext)));
            lfoRef.current = lfo;
            Curry._1(appContext.setLfoOutputGain, (function (param) {
                    return Caml_option.some(lfo.outputGain);
                  }));
            var envelope = Envelope$WebAudio.make(LFO$WebAudio.getFrequency(lfo).value, LFO$WebAudio.getFrequency(lfo), audioContext);
            Curry._1(appContext.addToTriggerTargets, envelope);
            envelopeRef.current = envelope;
            Curry._1(setLfoOn, (function (param) {
                    return true;
                  }));
          } else {
            console.log("Missing Audio Context");
          }
          return (function (param) {
                    console.log("ToDo: Implement LFO cleanup");
                    return /* () */0;
                  });
        }), ([]));
  var match$1 = envelopeRef.current;
  var tmp;
  if (match[0] && match$1 !== undefined) {
    var env = match$1;
    tmp = React.createElement("div", {
          className: "row-group-container"
        }, React.createElement("div", {
              className: "unit-container"
            }, React.createElement(Knob$WebAudio.make, {
                  name: "FREQUENCY",
                  config: {
                    minValue: Pervasives.epsilon_float,
                    maxValue: 30.0,
                    scale: /* Linear */0,
                    size: 80
                  },
                  initialParamValue: env.envelopeParams.targetValue,
                  setParamValue: (function (value) {
                      return Envelope$WebAudio.update(/* TargetValue */Block.__(4, [value]), env);
                    })
                })), React.createElement(EnvelopeUnit$WebAudio.make, {
              envelope: env
            }));
  } else {
    tmp = null;
  }
  return React.createElement("div", {
              className: "unit-group-container"
            }, React.createElement("h2", {
                  className: "unit-label"
                }, "LFO"), tmp);
}

var make = LFOUnit;

export {
  make ,
  
}
/* react Not a pure module */
