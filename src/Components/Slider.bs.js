// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as ColorPalette$WebAudio from "../ColorPalette.bs.js";

function sizeInPixels(x) {
  return String(x) + "px";
}

function clamp(value, config) {
  var value$1 = value < config.minValue ? config.minValue : value;
  if (value$1 > config.maxValue) {
    return config.maxValue;
  } else {
    return value$1;
  }
}

function mapValue(from, target, value) {
  var ymin = target[0];
  var xmin = from[0];
  return (value - xmin) / (from[1] - xmin) * (target[1] - ymin) + ymin;
}

function Slider(Props) {
  var name = Props.name;
  var param = Props.param;
  var config = Props.config;
  var partial_arg_0 = config.minValue;
  var partial_arg_1 = config.maxValue;
  var partial_arg = [
    partial_arg_0,
    partial_arg_1
  ];
  var mapParam = function (param, param$1) {
    return mapValue(partial_arg, param, param$1);
  };
  var arg_0 = config.minValue;
  var arg_1 = config.maxValue;
  var arg = [
    arg_0,
    arg_1
  ];
  var indicatorPrecission = React.useMemo((function () {
          var logRange = Math.log10(config.maxValue - config.minValue);
          if (logRange > 3.0) {
            return 0;
          } else if (logRange > 0.8) {
            return 1;
          } else {
            return 2;
          }
        }), [
        config.minValue,
        config.maxValue
      ]);
  var mapValueToHeight = function (value) {
    var height = Curry._2(mapParam, [
          110,
          0.0
        ], value);
    return height.toString() + "px";
  };
  var match = React.useState(function () {
        return param.value;
      });
  var setValue = match[1];
  var value = match[0];
  var lastY = React.useRef(0);
  var handleMouseMove = function ($$event) {
    var clientY = $$event.clientY;
    Curry._1(setValue, (function (value) {
            var change = mapValue([
                  0.0,
                  120
                ], [
                  0.0,
                  1.0
                ], lastY.current - clientY | 0);
            var newValue = mapValue([
                  0.0,
                  1.0
                ], arg, change + Curry._2(mapParam, [
                      0.0,
                      1.0
                    ], value));
            var clampedValue = clamp(newValue, config);
            param.value = clampedValue;
            lastY.current = clientY;
            return clampedValue;
          }));
    
  };
  var handleMouseUp = function (param) {
    document.removeEventListener("mousemove", handleMouseMove);
    
  };
  var handleMouseDown = function ($$event) {
    var clientY = $$event.clientY;
    lastY.current = clientY;
    document.addEventListener("mousemove", handleMouseMove);
    document.addEventListener("mouseup", handleMouseUp, {
          capture: false,
          once: true,
          passive: true
        });
    
  };
  return React.createElement("div", {
              className: "control-container"
            }, React.createElement("h4", {
                  className: "control-label"
                }, name), React.createElement("div", {
                  style: {
                    backgroundColor: ColorPalette$WebAudio.black,
                    height: String(120) + "px",
                    margin: "0 auto",
                    width: String(6) + "px"
                  },
                  onMouseDown: handleMouseDown
                }, React.createElement("div", {
                      style: {
                        backgroundColor: ColorPalette$WebAudio.silver,
                        border: "1px solid " + ColorPalette$WebAudio.white,
                        height: String(10) + "px",
                        width: String(30) + "px",
                        transform: "translate(" + (String(30 * -0.4 | 0) + "px, " + (mapValueToHeight(value) + ")"))
                      }
                    })), React.createElement("h4", {
                  className: "control-label"
                }, value.toFixed(indicatorPrecission)));
}

var height = 120;

var width = 30;

var buttonHeight = 10;

var make = Slider;

export {
  height ,
  width ,
  buttonHeight ,
  sizeInPixels ,
  clamp ,
  mapValue ,
  make ,
  
}
/* react Not a pure module */
