// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Knob$WebAudio from "./Knob.bs.js";
import * as AudioContext$WebAudio from "../WebAudio/AudioContext.bs.js";
import * as AppContextProvider$WebAudio from "./AppContextProvider.bs.js";

var range = Caml_array.caml_make_vect(256, 0.0);

var sineWave = $$Array.mapi((function (idx, param) {
        return Math.sin(idx / 256.0 * 2.0 * Math.PI);
      }), range);

var sawWave = $$Array.mapi((function (idx, param) {
        return idx / 256.0 * 2.0 - 1.0;
      }), range);

var triangleWave = $$Array.mapi((function (idx, param) {
        var normalizedIndex = idx / 256.0;
        if (normalizedIndex < 0.5) {
          return normalizedIndex * 4.0 - 1.0;
        } else {
          return (1.0 - normalizedIndex) * 4.0 - 1.0;
        }
      }), range);

var squareWave = $$Array.mapi((function (idx, param) {
        var normalizedIndex = idx / 256.0;
        if (normalizedIndex < 0.25 || normalizedIndex > 0.75) {
          return -1.0;
        } else {
          return 1.0;
        }
      }), range);

function WaveSampler(Props) {
  var setWaveCallback = Props.setWaveCallback;
  var appContext = React.useContext(AppContextProvider$WebAudio.appContext);
  var match = React.useState(function () {
        return 1.0;
      });
  var setSineFactor = match[1];
  var sineFactor = match[0];
  var match$1 = React.useState(function () {
        return 0.0;
      });
  var setSawFactor = match$1[1];
  var sawFactor = match$1[0];
  var match$2 = React.useState(function () {
        return 0.0;
      });
  var setTriangleFactor = match$2[1];
  var triangleFactor = match$2[0];
  var match$3 = React.useState(function () {
        return 0.0;
      });
  var setSquareFactor = match$3[1];
  var squareFactor = match$3[0];
  var sampleWave = function (param) {
    return $$Array.mapi((function (idx, param) {
                  var si = sineFactor * Caml_array.caml_array_get(sineWave, idx);
                  var sa = sawFactor * Caml_array.caml_array_get(sawWave, idx);
                  var tr = triangleFactor * Caml_array.caml_array_get(triangleWave, idx);
                  var sq = squareFactor * Caml_array.caml_array_get(squareWave, idx);
                  return si + sa + tr + sq;
                }), range);
  };
  React.useEffect((function () {
          var audioCtx = appContext.audioContext;
          if (audioCtx !== undefined) {
            Curry._1(setWaveCallback, AudioContext$WebAudio.makePeriodicWave(sampleWave(undefined), Caml_option.valFromOption(audioCtx)));
          } else {
            console.log("Audio Context missing");
          }
          
        }), [
        sineFactor,
        sawFactor,
        triangleFactor,
        squareFactor
      ]);
  return React.createElement("div", {
              className: "unit-container"
            }, React.createElement("div", undefined, React.createElement(Knob$WebAudio.make, {
                      name: "SINE",
                      config: {
                        minValue: 0.0,
                        maxValue: 1.0,
                        scale: /* Linear */0,
                        size: 50
                      },
                      initialParamValue: sineFactor,
                      setParamValue: (function (value) {
                          return Curry._1(setSineFactor, (function (param) {
                                        return value;
                                      }));
                        })
                    }), React.createElement(Knob$WebAudio.make, {
                      name: "SAW",
                      config: {
                        minValue: 0.0,
                        maxValue: 1.0,
                        scale: /* Linear */0,
                        size: 50
                      },
                      initialParamValue: sawFactor,
                      setParamValue: (function (value) {
                          return Curry._1(setSawFactor, (function (param) {
                                        return value;
                                      }));
                        })
                    })), React.createElement("div", undefined, React.createElement(Knob$WebAudio.make, {
                      name: "TRIANGLE",
                      config: {
                        minValue: 0.0,
                        maxValue: 1.0,
                        scale: /* Linear */0,
                        size: 50
                      },
                      initialParamValue: triangleFactor,
                      setParamValue: (function (value) {
                          return Curry._1(setTriangleFactor, (function (param) {
                                        return value;
                                      }));
                        })
                    }), React.createElement(Knob$WebAudio.make, {
                      name: "SQUARE",
                      config: {
                        minValue: 0.0,
                        maxValue: 1.0,
                        scale: /* Linear */0,
                        size: 50
                      },
                      initialParamValue: squareFactor,
                      setParamValue: (function (value) {
                          return Curry._1(setSquareFactor, (function (param) {
                                        return value;
                                      }));
                        })
                    })));
}

var make = WaveSampler;

export {
  range ,
  sineWave ,
  sawWave ,
  triangleWave ,
  squareWave ,
  make ,
  
}
/* sineWave Not a pure module */
