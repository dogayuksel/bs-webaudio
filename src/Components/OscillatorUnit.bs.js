// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Knob$WebAudio from "./Knob.bs.js";
import * as Slider$WebAudio from "./Slider.bs.js";
import * as Switch$WebAudio from "./Switch.bs.js";
import * as Envelope$WebAudio from "../Envelope/Envelope.bs.js";
import * as Oscillator$WebAudio from "../Oscillator/Oscillator.bs.js";
import * as WaveSampler$WebAudio from "./WaveSampler.bs.js";
import * as EnvelopeUnit$WebAudio from "./EnvelopeUnit.bs.js";
import * as AppContextProvider$WebAudio from "./AppContextProvider.bs.js";

function OscillatorUnit(Props) {
  var name = Props.name;
  var targetOutput = Props.targetOutput;
  var aloneOpt = Props.alone;
  var remove = Props.remove;
  var alone = aloneOpt !== undefined ? aloneOpt : false;
  var appContext = React.useContext(AppContextProvider$WebAudio.appContext);
  var match = React.useState(function () {
        return false;
      });
  var setOscillatorOn = match[1];
  var oscillatorOn = match[0];
  var oscillator = React.useRef(undefined);
  var envelope = React.useRef(undefined);
  var cleanUp = function (param) {
    Belt_Option.map(oscillator.current, Oscillator$WebAudio.cleanUp);
    Belt_Option.map(envelope.current, appContext.removeFromTriggerTargets);
    
  };
  var toggleOscillator = React.useCallback((function (param) {
          if (oscillatorOn === false) {
            var audioContext = appContext.audioContext;
            if (audioContext !== undefined) {
              var audioContext$1 = Caml_option.valFromOption(audioContext);
              var target = targetOutput !== undefined ? Caml_option.valFromOption(targetOutput) : audioContext$1.destination;
              var osc = Oscillator$WebAudio.start(Oscillator$WebAudio.connect(target, Oscillator$WebAudio.make(undefined, audioContext$1)));
              oscillator.current = osc;
              var arg = Oscillator$WebAudio.getEnvelopeGain(osc);
              var env = Envelope$WebAudio.make(undefined, arg, audioContext$1);
              Curry._1(appContext.addToTriggerTargets, env);
              envelope.current = env;
              Curry._1(setOscillatorOn, (function (param) {
                      return true;
                    }));
              return ;
            }
            console.log("Missing Audio Context");
            return ;
          }
          cleanUp(undefined);
          return Curry._1(setOscillatorOn, (function (param) {
                        return false;
                      }));
        }), [
        oscillatorOn,
        appContext.audioContext,
        targetOutput
      ]);
  React.useEffect((function () {
          if (alone) {
            Curry._1(toggleOscillator, undefined);
          }
          return (function (param) {
                    return cleanUp(undefined);
                  });
        }), []);
  var match$1 = oscillator.current;
  var match$2 = envelope.current;
  return React.createElement("div", {
              className: "unit-group-container"
            }, React.createElement("div", {
                  className: "row-group-container"
                }, React.createElement("h2", {
                      className: "unit-label"
                    }, name), React.createElement("div", {
                      style: {
                        left: "0",
                        position: "absolute",
                        top: "0"
                      }
                    }, React.createElement("button", {
                          className: "unit-container",
                          onClick: (function (param) {
                              return Curry._1(remove, undefined);
                            })
                        }, "X"))), React.createElement("div", {
                  className: "row-group-container"
                }, React.createElement("div", {
                      className: "unit-container"
                    }, React.createElement(Switch$WebAudio.make, {
                          isOn: oscillatorOn,
                          toggle: toggleOscillator,
                          children: "START"
                        })), match$1 !== undefined && match$2 !== undefined ? React.createElement(React.Fragment, undefined, React.createElement(WaveSampler$WebAudio.make, {
                            setWaveCallback: (function (wave) {
                                return Oscillator$WebAudio.setOscillatorType(/* Custom */{
                                            _0: wave
                                          }, match$1);
                              })
                          }), React.createElement("div", {
                            className: "unit-container"
                          }, React.createElement(Knob$WebAudio.make, {
                                name: "FREQUENCY",
                                config: {
                                  minValue: 1.0,
                                  maxValue: 18000.0,
                                  scale: /* Logarithmic */1,
                                  size: 120
                                },
                                initialParamValue: Oscillator$WebAudio.getFrequency(match$1).value,
                                setParamValue: (function (frequency) {
                                    return Oscillator$WebAudio.setFrequency(frequency, match$1);
                                  })
                              }), React.createElement(Slider$WebAudio.make, {
                                name: "GAIN",
                                param: Oscillator$WebAudio.getOscillatorGain(match$1),
                                config: {
                                  minValue: Pervasives.epsilon_float,
                                  maxValue: 1.0
                                }
                              })), React.createElement(EnvelopeUnit$WebAudio.make, {
                            envelope: match$2
                          })) : null));
}

var make = OscillatorUnit;

export {
  make ,
  
}
/* react Not a pure module */
