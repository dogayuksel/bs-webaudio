// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Knob$WebAudio from "./Knob.bs.js";
import * as Slider$WebAudio from "./Slider.bs.js";
import * as Switch$WebAudio from "./Switch.bs.js";
import * as Envelope$WebAudio from "../Envelope/Envelope.bs.js";
import * as Oscillator$WebAudio from "../Oscillator/Oscillator.bs.js";
import * as EnvelopeUnit$WebAudio from "./EnvelopeUnit.bs.js";
import * as AppContextProvider$WebAudio from "./AppContextProvider.bs.js";

function OscillatorUnit(Props) {
  var name = Props.name;
  var targetOutput = Props.targetOutput;
  var appContext = React.useContext(AppContextProvider$WebAudio.appContext);
  var match = React.useState((function () {
          return false;
        }));
  var setOscillatorOn = match[1];
  var oscillatorOn = match[0];
  var match$1 = React.useState((function () {
          return ;
        }));
  var setOscillator = match$1[1];
  var oscillator = match$1[0];
  var match$2 = React.useState((function () {
          return ;
        }));
  var setEnvelope = match$2[1];
  var envelope = match$2[0];
  var toggleOscillator = function (param) {
    if (oscillatorOn === false) {
      var match = appContext.audioContext;
      if (match !== undefined) {
        var audioContext = Caml_option.valFromOption(match);
        var target = targetOutput !== undefined ? Caml_option.valFromOption(targetOutput) : audioContext.destination;
        var osc = Oscillator$WebAudio.start(Oscillator$WebAudio.connect(target, Oscillator$WebAudio.make(/* Sine */0, audioContext)));
        Curry._1(setOscillator, (function (param) {
                return osc;
              }));
        var env = Envelope$WebAudio.make(Oscillator$WebAudio.getEnvelopeGain(osc), audioContext);
        Curry._1(appContext.addToTriggerTargets, env);
        Curry._1(setEnvelope, (function (param) {
                return env;
              }));
        Curry._1(setOscillatorOn, (function (param) {
                return true;
              }));
        return /* () */0;
      } else {
        console.log("Missing Audio Context");
        return /* () */0;
      }
    } else {
      Belt_Option.map(Belt_Option.map(oscillator, Oscillator$WebAudio.stop), Oscillator$WebAudio.disconnect);
      Curry._1(setOscillator, (function (param) {
              return ;
            }));
      Belt_Option.map(envelope, appContext.removeFromTriggerTargets);
      Curry._1(setEnvelope, (function (param) {
              return ;
            }));
      return Curry._1(setOscillatorOn, (function (param) {
                    return false;
                  }));
    }
  };
  var tmp;
  if (oscillator !== undefined && envelope !== undefined) {
    var osc = oscillator;
    tmp = React.createElement(React.Fragment, undefined, React.createElement(Knob$WebAudio.make, {
              name: "Frequency",
              config: {
                minValue: 1.0,
                maxValue: 18000.0,
                scale: /* Logarithmic */1,
                size: 120
              },
              initialParamValue: Oscillator$WebAudio.getFrequency(osc).value,
              setParamValue: (function (frequency) {
                  return Oscillator$WebAudio.setFrequency(frequency, osc);
                })
            }), React.createElement(Slider$WebAudio.make, {
              name: "Gain",
              param: Oscillator$WebAudio.getOscillatorGain(osc),
              config: {
                minValue: Pervasives.epsilon_float,
                maxValue: 100.0
              }
            }), React.createElement(EnvelopeUnit$WebAudio.make, {
              envelope: envelope
            }));
  } else {
    tmp = null;
  }
  return React.createElement("div", undefined, React.createElement("h2", undefined, name), React.createElement("div", {
                  onClick: toggleOscillator
                }, React.createElement(Switch$WebAudio.make, {
                      isOn: oscillatorOn,
                      children: "Start"
                    })), tmp);
}

var make = OscillatorUnit;

export {
  make ,
  
}
/* react Not a pure module */
