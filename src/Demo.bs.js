// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';


var $$AudioParam = { };

function Impl(T) {
  return { };
}

var $$AudioNode = {
  Impl: Impl
};

var $$AudioDestinationNode = { };

var $$GainNode = { };

var $$PeriodicWave = { };

function Impl$1(T) {
  return { };
}

var $$OscillatorNode = {
  Impl: Impl$1
};

var $$AudioContext = { };

var audioCtx = new AudioContext();

var oscillator = audioCtx.createOscillator();

var gain = audioCtx.createGain();

oscillator.connect(gain);

var real = new Float32Array(3);

var imag = new Float32Array(3);

real[0] = 0.0;

real[1] = 1.0;

real[2] = 1.0;

imag[0] = 0.0;

imag[1] = 0.0;

imag[2] = 0.0;

var periodicWave = audioCtx.createPeriodicWave(real, imag, {
      disableNormalization: true
    });

oscillator.setPeriodicWave(periodicWave);

gain.connect(audioCtx.destination);

oscillator.start();

setTimeout((function (param) {
        var timestamp = audioCtx.getOutputTimestamp();
        console.log(timestamp.contextTime);
        console.log(oscillator.frequency.defaultValue);
        var __x = oscillator.frequency;
        __x.value = 240.0;
        oscillator.stop(timestamp.contextTime + 2.0);
        return /* () */0;
      }), 2500);

exports.$$AudioParam = $$AudioParam;
exports.$$AudioNode = $$AudioNode;
exports.$$AudioDestinationNode = $$AudioDestinationNode;
exports.$$GainNode = $$GainNode;
exports.$$PeriodicWave = $$PeriodicWave;
exports.$$OscillatorNode = $$OscillatorNode;
exports.$$AudioContext = $$AudioContext;
exports.audioCtx = audioCtx;
exports.oscillator = oscillator;
exports.gain = gain;
exports.real = real;
exports.imag = imag;
exports.periodicWave = periodicWave;
/* audioCtx Not a pure module */
