// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Pervasives = require("bs-platform/lib/js/pervasives.js");
var LFO$WebAudio = require("./LFO/LFO.bs.js");
var Envelope$WebAudio = require("./Envelope/Envelope.bs.js");
var Oscillator$WebAudio = require("./Oscillator/Oscillator.bs.js");
var BiquadFilterNode$WebAudio = require("./WebAudio/BiquadFilterNode.bs.js");

var audioCtx = new AudioContext();

var lfo = LFO$WebAudio.make(audioCtx);

LFO$WebAudio.setFrequency(10.0, lfo);

LFO$WebAudio.connect(audioCtx.destination, lfo);

var oscOne = Oscillator$WebAudio.make(/* Custom */[Oscillator$WebAudio.sampleRandomWave(/* () */0)], audioCtx);

var oscOneGain = audioCtx.createGain();

Oscillator$WebAudio.connect(oscOneGain, oscOne);

oscOneGain.connect(lfo.lfo);

oscOneGain.gain.value = Pervasives.epsilon_float;

Oscillator$WebAudio.start(oscOne);

Oscillator$WebAudio.getFrequency(oscOne).setValueCurveAtTime(/* array */[
      470.0,
      370.0,
      470.0
    ], 2.0, 2.5);

var oscTwo = Oscillator$WebAudio.make(/* Sawtooth */2, audioCtx);

var oscTwoFilter = audioCtx.createBiquadFilter();

var oscTwoGain = audioCtx.createGain();

BiquadFilterNode$WebAudio.setType(oscTwoFilter, /* Lowpass */0);

oscTwoFilter.frequency.value = 370.0;

oscTwoFilter.frequency.setTargetAtTime(300.0, 2.0, 3.0);

Oscillator$WebAudio.connect(oscTwoFilter, oscTwo);

oscTwoFilter.connect(oscTwoGain);

oscTwoGain.connect(lfo.lfo);

oscTwoGain.gain.value = Pervasives.epsilon_float;

Oscillator$WebAudio.start(oscTwo);

var state = {
  a: false
};

var Keyboard = {
  state: state
};

function trigger(e) {
  if (state.a === false && e.key === "a") {
    state.a = true;
    var currentTime = audioCtx.getOutputTimestamp();
    Envelope$WebAudio.trigger(currentTime, oscOneGain);
    return Envelope$WebAudio.trigger(currentTime, oscTwoGain);
  } else {
    return 0;
  }
}

function endTrigger(e) {
  if (e.key === "a") {
    state.a = false;
    var currentTime = audioCtx.getOutputTimestamp();
    Envelope$WebAudio.endTrigger(currentTime, oscOneGain);
    return Envelope$WebAudio.endTrigger(currentTime, oscTwoGain);
  } else {
    return 0;
  }
}

document.addEventListener("keydown", trigger);

document.addEventListener("keyup", endTrigger);

exports.audioCtx = audioCtx;
exports.lfo = lfo;
exports.oscOne = oscOne;
exports.oscOneGain = oscOneGain;
exports.oscTwo = oscTwo;
exports.oscTwoFilter = oscTwoFilter;
exports.oscTwoGain = oscTwoGain;
exports.Keyboard = Keyboard;
exports.trigger = trigger;
exports.endTrigger = endTrigger;
/* audioCtx Not a pure module */
