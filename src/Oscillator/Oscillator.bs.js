// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Random = require("bs-platform/lib/js/random.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var PeriodicWave$WebAudio = require("../WebAudio/PeriodicWave.bs.js");

function sampleRandomWave(param) {
  var samples = Caml_array.caml_make_vect(256, 0.0);
  var previousValue = 0.0;
  Caml_array.caml_array_set(samples, 0, previousValue);
  for(var x = 1; x <= 255; ++x){
    var newValue = previousValue + Random.$$float(0.2) - 0.1;
    Caml_array.caml_array_set(samples, x, newValue);
    previousValue = newValue;
  }
  return samples;
}

function setOscillatorNodeType(oscillatorType, oscillator, audioCtx) {
  if (typeof oscillatorType === "number") {
    switch (oscillatorType) {
      case /* Sine */0 :
          oscillator.type = "sine";
          break;
      case /* Square */1 :
          oscillator.type = "square";
          break;
      case /* Sawtooth */2 :
          oscillator.type = "sawtooth";
          break;
      case /* Triange */3 :
          oscillator.type = "triange";
          break;
      
    }
  } else {
    var match = PeriodicWave$WebAudio.calculateCoefficients(oscillatorType[0]);
    var periodicWave = audioCtx.createPeriodicWave(match[0], match[1], {
          disableNormalization: false
        });
    oscillator.setPeriodicWave(periodicWave);
  }
  return oscillator;
}

function setFrequency(frequency, oscillator) {
  oscillator.oscillatorNode.frequency.value = frequency;
  return /* () */0;
}

function getFrequency(oscillator) {
  return oscillator.oscillatorNode.frequency;
}

function start(oscillator) {
  oscillator.oscillatorNode.start();
  return oscillator;
}

function connect(target, oscillator) {
  oscillator.oscillatorNode.connect(target);
  return oscillator;
}

function make(oscillatorType, audioCtx) {
  var oscillatorNode = setOscillatorNodeType(oscillatorType, audioCtx.createOscillator(), audioCtx);
  return {
          audioContext: audioCtx,
          oscillatorNode: oscillatorNode,
          oscillatorType: oscillatorType
        };
}

exports.sampleRandomWave = sampleRandomWave;
exports.setOscillatorNodeType = setOscillatorNodeType;
exports.setFrequency = setFrequency;
exports.getFrequency = getFrequency;
exports.start = start;
exports.connect = connect;
exports.make = make;
/* No side effect */
