// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var FFT$WebAudio = require("../FFT/FFT.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function toTypedArray(floatArray) {
  var realCoefficients = new Float32Array($$Array.map((function (x) {
              return x.re;
            }), floatArray));
  var imaginaryCoefficients = new Float32Array($$Array.map((function (x) {
              return x.im;
            }), floatArray));
  return /* tuple */[
          realCoefficients,
          imaginaryCoefficients
        ];
}

function sampleSineWave(param) {
  var samples = Caml_array.caml_make_vect(256, {
        re: 0.0,
        im: 0.0
      });
  for(var x = 0; x <= 255; ++x){
    var mapped = Math.sin(x / 256.0 * 2.0 * Math.PI + Math.PI);
    Caml_array.caml_array_set(samples, x, {
          re: mapped,
          im: 0.0
        });
  }
  return toTypedArray(FFT$WebAudio.fft(samples));
}

function sampleSawTooth(param) {
  var samples = Caml_array.caml_make_vect(256, {
        re: 0.0,
        im: 0.0
      });
  for(var x = 0; x <= 255; ++x){
    var mapped = x / 256.0 * 2.0 - 1.0;
    Caml_array.caml_array_set(samples, x, {
          re: mapped,
          im: 0.0
        });
  }
  return toTypedArray(FFT$WebAudio.fft(samples));
}

function make(oscillatorType, audioCtx) {
  var oscillator = audioCtx.createOscillator();
  var match;
  if (oscillatorType !== 1) {
    if (oscillatorType !== 0) {
      throw Caml_builtin_exceptions.not_found;
    }
    match = sampleSineWave(/* () */0);
  } else {
    match = sampleSawTooth(/* () */0);
  }
  var periodicWave = audioCtx.createPeriodicWave(match[0], match[1], {
        disableNormalization: false
      });
  oscillator.setPeriodicWave(periodicWave);
  return oscillator;
}

exports.toTypedArray = toTypedArray;
exports.sampleSineWave = sampleSineWave;
exports.sampleSawTooth = sampleSawTooth;
exports.make = make;
/* No side effect */
