// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Random = require("bs-platform/lib/js/random.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var AudioContext$WebAudio = require("../WebAudio/AudioContext.bs.js");
var OscillatorNode$WebAudio = require("../WebAudio/OscillatorNode.bs.js");

function sampleRandomWave(param) {
  var samples = Caml_array.caml_make_vect(256, 0.0);
  var previousValue = 0.0;
  Caml_array.caml_array_set(samples, 0, previousValue);
  for(var x = 1; x <= 255; ++x){
    var newValue = previousValue + Random.$$float(0.2) - 0.1;
    Caml_array.caml_array_set(samples, x, newValue);
    previousValue = newValue;
  }
  return samples;
}

function setFrequency(frequency, oscillator) {
  oscillator.oscillatorNode.frequency.value = frequency;
  return /* () */0;
}

function getFrequency(oscillator) {
  return oscillator.oscillatorNode.frequency;
}

function start(oscillator) {
  oscillator.oscillatorNode.start();
  return oscillator;
}

function connect(target, oscillator) {
  oscillator.oscillatorGain.connect(target);
  return oscillator;
}

function setOscillatorType(oscillatorType, oscillator) {
  return OscillatorNode$WebAudio.setOscillatorNodeType(oscillatorType, oscillator.oscillatorNode);
}

function make($staropt$star, audioCtx) {
  var oscillatorType = $staropt$star !== undefined ? $staropt$star : /* Sine */0;
  var oscillatorNode = audioCtx.createOscillator();
  var oscillatorGain = audioCtx.createGain();
  oscillatorNode.connect(oscillatorGain);
  var oscillator = {
    audioContext: audioCtx,
    oscillatorNode: oscillatorNode,
    oscillatorType: oscillatorType,
    oscillatorGain: oscillatorGain
  };
  OscillatorNode$WebAudio.setOscillatorNodeType(oscillatorType, oscillatorNode);
  return oscillator;
}

function makeFromRandom(audioCtx) {
  var oscillator = make(undefined, audioCtx);
  var periodicWave = AudioContext$WebAudio.makePeriodicWave(sampleRandomWave(/* () */0), audioCtx);
  OscillatorNode$WebAudio.setOscillatorNodeType(/* Custom */[periodicWave], oscillator.oscillatorNode);
  return oscillator;
}

exports.sampleRandomWave = sampleRandomWave;
exports.setFrequency = setFrequency;
exports.getFrequency = getFrequency;
exports.start = start;
exports.connect = connect;
exports.setOscillatorType = setOscillatorType;
exports.make = make;
exports.makeFromRandom = makeFromRandom;
/* OscillatorNode-WebAudio Not a pure module */
