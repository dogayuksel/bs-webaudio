// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Random = require("bs-platform/lib/js/random.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var AudioContext$WebAudio = require("../WebAudio/AudioContext.bs.js");
var OscillatorNode$WebAudio = require("../WebAudio/OscillatorNode.bs.js");

function sampleRandomWave(param) {
  var samples = Caml_array.caml_make_vect(256, 0.0);
  var previousValue = 0.0;
  Caml_array.caml_array_set(samples, 0, previousValue);
  for(var x = 1; x <= 255; ++x){
    var newValue = previousValue + Random.$$float(0.2) - 0.1;
    Caml_array.caml_array_set(samples, x, newValue);
    previousValue = newValue;
  }
  return samples;
}

function setFrequency(frequency, oscillator) {
  oscillator.oscillatorNode.frequency.value = frequency;
  return /* () */0;
}

function getFrequency(oscillator) {
  return oscillator.oscillatorNode.frequency;
}

function start(oscillator) {
  oscillator.oscillatorNode.start();
  return oscillator;
}

function connect(target, oscillator) {
  oscillator.oscillatorNode.connect(target);
  return oscillator;
}

function make(oscillatorType, audioCtx) {
  var oscillatorNode = audioCtx.createOscillator();
  var oscillatorNode$1;
  if (typeof oscillatorType === "number") {
    switch (oscillatorType) {
      case /* Sine */0 :
          oscillatorNode$1 = OscillatorNode$WebAudio.setOscillatorNodeType(/* DefaultWave */Block.__(0, ["sine"]), oscillatorNode);
          break;
      case /* Square */1 :
          oscillatorNode$1 = OscillatorNode$WebAudio.setOscillatorNodeType(/* DefaultWave */Block.__(0, ["square"]), oscillatorNode);
          break;
      case /* Sawtooth */2 :
          oscillatorNode$1 = OscillatorNode$WebAudio.setOscillatorNodeType(/* DefaultWave */Block.__(0, ["sawtooth"]), oscillatorNode);
          break;
      case /* Triange */3 :
          oscillatorNode$1 = OscillatorNode$WebAudio.setOscillatorNodeType(/* DefaultWave */Block.__(0, ["triangle"]), oscillatorNode);
          break;
      
    }
  } else {
    var periodicWave = AudioContext$WebAudio.makePeriodicWave(oscillatorType[0], audioCtx);
    oscillatorNode$1 = OscillatorNode$WebAudio.setOscillatorNodeType(/* CustomWave */Block.__(1, [periodicWave]), oscillatorNode);
  }
  return {
          audioContext: audioCtx,
          oscillatorNode: oscillatorNode$1,
          oscillatorType: oscillatorType
        };
}

exports.sampleRandomWave = sampleRandomWave;
exports.setFrequency = setFrequency;
exports.getFrequency = getFrequency;
exports.start = start;
exports.connect = connect;
exports.make = make;
/* OscillatorNode-WebAudio Not a pure module */
