// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Switch$WebAudio from "./Components/Switch.bs.js";
import * as Keyboard$WebAudio from "./Components/Keyboard.bs.js";
import * as AudioContext$WebAudio from "./WebAudio/AudioContext.bs.js";
import * as OscillatorRack$WebAudio from "./Components/OscillatorRack.bs.js";
import * as AppContextProvider$WebAudio from "./Components/AppContextProvider.bs.js";

function App(Props) {
  var match = React.useState((function () {
          return false;
        }));
  var setAudioContextOn = match[1];
  var audioContextOn = match[0];
  var match$1 = React.useState((function () {
          return /* [] */0;
        }));
  var setTriggerTargets = match$1[1];
  var audioContext = React.useRef(undefined);
  var addToTriggerTargets = function (envelope) {
    return Curry._1(setTriggerTargets, (function (targets) {
                  return /* :: */[
                          envelope,
                          targets
                        ];
                }));
  };
  var removeFromTriggerTargets = function (envelope) {
    return Curry._1(setTriggerTargets, (function (targets) {
                  return List.filter((function (e) {
                                  return Caml_obj.caml_notequal(e, envelope);
                                }))(targets);
                }));
  };
  var toggleAudioContextOn = React.useCallback((function (param) {
          if (audioContextOn === false) {
            var match = audioContext.current;
            if (match !== undefined) {
              Caml_option.valFromOption(match).resume().then((function (param) {
                      return Promise.resolve(Curry._1(setAudioContextOn, (function (param) {
                                        return true;
                                      })));
                    }));
              return /* () */0;
            } else {
              audioContext.current = Caml_option.some(Curry._1(AudioContext$WebAudio.createAudioContext, /* () */0));
              return Curry._1(setAudioContextOn, (function (param) {
                            return true;
                          }));
            }
          } else {
            Belt_Option.map(Belt_Option.map(audioContext.current, (function (prim) {
                        return prim.suspend();
                      })), (function (param) {
                    return param.then((function (param) {
                                  return Promise.resolve(Curry._1(setAudioContextOn, (function (param) {
                                                    return false;
                                                  })));
                                }));
                  }));
            return /* () */0;
          }
        }), /* array */[audioContextOn]);
  var match$2 = audioContext.current;
  return React.createElement(AppContextProvider$WebAudio.make, AppContextProvider$WebAudio.makeProps({
                  audioContext: audioContext.current,
                  triggerTargets: match$1[0],
                  addToTriggerTargets: addToTriggerTargets,
                  removeFromTriggerTargets: removeFromTriggerTargets
                }, null, /* () */0), React.createElement("div", {
                  style: {
                    position: "absolute",
                    right: "0",
                    top: "0"
                  }
                }, React.createElement("div", {
                      className: "unit-container"
                    }, React.createElement(Switch$WebAudio.make, {
                          isOn: audioContextOn,
                          toggle: toggleAudioContextOn,
                          children: "POWER"
                        }))), match$2 !== undefined ? React.createElement(OscillatorRack$WebAudio.make, { }) : null, React.createElement(Keyboard$WebAudio.make, { }));
}

var make = App;

export {
  make ,
  
}
/* react Not a pure module */
